######################################################################################################
######################################################################################################
###################																   ###################
###################	           	New Zealand parrot RH2 opsin discovery 	           ###################
###################																   ###################
######################################################################################################
######################################################################################################

##### Pipeline and scripts used for analyses of the kea and kaka RH2 opsin genomic loci
##### Genomic evidence of a functional RH2 opsin in New Zealand parrots and implications for pest control
##### Stefanie Grosser, Ludovic Dutoit, Yasmin Foster, Fiona Robertson, Andrew E. Fidler, Denise Martini, Michael Knapp  and Bruce C. Robertson
##### University of Otago, December 2021


###~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  Require raw read data  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~###

### Kea raw reads data is on the SRA and can be downloaded using the sra toolkit

fastq-dump.2.9.2 SRR959225
fastq-dump.2.9.2 SRR959226
fastq-dump.2.9.2 SRR959227  

### Kea genome assembly is GCF_000696875.1_ASM69687v1_genomic.fna (NCBI)

### Kakapo genome assembly is GCF_004027225.1_bStrHab1_v1.p_genomic.fna (NCBI)

### Zebrafinch genome assembly is GCF_008822105.2_bTaeGut2.pat.W.v2_genomic.fna (NCBI)

### Kaka genome is N_meridionalis_pseudochr.fa (obtained from Martini et al. 2021)

 

###~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  Map raw read data to genomes  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~###

### Mapping reads to a reference scaffold by extracting
### it from reference genome before identifying reads matching
### a specific region of interest


### Define paths and files

ref_genome="N_meridionalis_pseudochr.fa" # Reference genome
target_scaf="ps_chr_26" # Target scaffold
targetbed="ps_chr_26_100k.bed" # A bed file containing the region of $target_scaf to extract reads from
reads_folder="../Whole_GenomeKaka/NZGL02410" #Path to paired-endraw reads folder (GZIPPED)
ncores=8


### Run script 
sbatch Mappingtotarget.sh  ${ref_genome} ${target_scaf} ${targetbed} ${reads_folder}  ${targetbed} ${ncores}

### Script: Mappingtotarget.sh


#!/bin/bash -e
#SBATCH -t 01:00:00
#SBATCH --job-name=mappingtotarget
#SBATCH --mem=8GB
#SBACTCH --cpus-per-task=8

### This script will map raw reads to a target scaffold 
### before extracting reads matching a specified 
### region of target scaffold around the gene of interest 
### in an output bam file 


echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
date
echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
echo

## Define paths and variables
ref_genome=$1
target_scaf=$2
targetbed=$3 # A bed file containing the region of $target_scaf to extract reads from
reads_folder=$4
ncores=$5

## Load Modules
module load SeqKit BWA SAM

# Extract reference target scaffold
echo ${target_scaf} > ids.txt
seqkit grep -i -f ids.txt $ref_genome > ${target_scaf}.fa
bwa index ${target_scaf}.fa

## Do paired-end mapping across libraries
for forward in ${reads_folder}/*R1*; 
  do 
  echo $forward
  ref_base=$(basename $ref_genome .fa) # base name for output bam
  reverse=${reads_folder}/$(basename $forward R1_001.fastq.gz)R2_001.fastq.gz #reverse reads
  ref_base=$(basename $ref_genome .fa)
  bwa mem -t $ncores   ${target_scaf}.fa  ${forward} ${reverse} | samtools view -Sb > ${ref_base}REF${ref_base}.bam
done

## Merge bams and create output ${targetbed}.bam
ls -1 *REF${ref_base}.bam > ps_chr_bamlist.txt
samtools merge  -b ps_chr_bamlist.txt temp_target.bam
samtools view -b -F 4 temp_target.bam -L ${targetbed} | samtools sort - | samtools view -Sb > ${targetbed}.bam
rm temp_target.bam
echo "OUTPUTTED" ${targetbed}.bam

echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
date
echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
echo


###~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  Extract fastq from bam  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~###


### Extract reads from bam in fastq format 

### Define paths and files
in_bam=/PATH/TO/FILE/NZparrot_opsin_reads.bam
out_path=/PATH/TO/FILE/

### Run script 
sbatch unmappedToFastq_bamUtil_script.sh  ${in_bam} ${out_path}


### Script: unmappedToFastq_bamUtil_script.sh


#!/bin/bash -e
#SBATCH -t 01:00:00
#SBATCH --job-name=bam2FastQ
#SBATCH --mem=1500MB

### This script will run bamUtil bam2FastQ to extract unmapped reads from bam files
### Extract paired reads to interleaved (name sorted) and unpaired to separate file
### To run script: sbatch unmappedToFastq_bamUtil_script.sh  ${in_bam} ${out_path}


echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
date
echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
echo

## Define paths and variables
in_bam=$1
out_path=$2

name=$(basename "$in_bam" ".bam")


## Run bamUtil readname sorted
echo "/PATH/TO/SOFTWARE/bamUtil/bin/bam bam2FastQ --in ${in_bam} --readname --outBase ${out_path}${name}"
/PATH/TO/SOFTWARE/bamUtil/bin/bam bam2FastQ --in ${in_bam} --readname --outBase ${out_path}${name}


echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
date
echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
echo


###~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  Trim adapters  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~###


### Trim adapters and low quality reads (Q<10) from the fastq reads

### Define paths and files
fr=/PATH/TO/FILE/NZparrot_opsin_reads_1.fastq
rr=/PATH/TO/FILE/NZparrot_opsin_reads_2.fastq
sr=/PATH/TO/FILE/NZparrot_opsin_reads.fastq
out_path=/PATH/TO/FILE/

### Run script 
sbatch trim_rawdata_TrimGalore.sh ${fr} ${rr} ${sr} ${out_path} 


### Script: trim_rawdata_TrimGalore.sh

#!/bin/bash -e
#SBATCH -t 02:00:00
#SBATCH --job-name=TrimGalore
#SBATCH --mem=500MB
#SBATCH --cpus-per-task 1 


### This script will run TrimGalore on all sequencing files
### To run script: sbatch trim_rawdata_TrimGalore.sh ${forward_reads} ${reverse_reads} ${single_reads} ${out_path} 

echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
date
echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
echo

## Load required modules
module load cutadapt
module load FastQC
module load TrimGalore/0.6.4-gimkl-2018b

forward_reads=$1
reverse_reads=$2
single_reads=$3
out_path=$4

trim_galore --paired --phred33 -q 10 --illumina --length 40 -o ${out_path} ${forward_reads} ${reverse_reads}

trim_galore --phred33 -q 10 --illumina --length 40 -o ${out_path} ${single_reads}

echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
date
echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
echo



###~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  Assemble reads  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~###


### Define paths and files
in_1=/PATH/TO/FILE/NZparrot_opsin_reads_1_val_1.fq
in_2=/PATH/TO/FILE/NZparrot_opsin_reads_2_val_2.fq
in_se=/PATH/TO/FILE/NZparrot_opsin_reads_trimmed.fq
out_dir=/PATH/TO/FILE/abyss_out/

### Run script 
sbatch run_abyssAssembly.sh ${in_1} ${in_2} ${in_se} ${out_dir}

### Script:  run_abyssAssembly.sh


#!/bin/bash -e
#SBATCH -t 03:00:00
#SBATCH --job-name=abyss
#SBATCH --mem=6GB

### This script will run Abyss to assemble unmapped reads
### To run script: sbatch run_abyssAssembly.sh ${in_1} ${in_2} ${in_se} ${out_dir}


## Load required modules
module load ABySS/2.0.2-gimkl-2017a


echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
date
echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
echo

echo "export TMPDIR=/PATH/TO/FILE/tempdir/"
export TMPDIR=/PATH/TO/FILE/tempdir/


## Define paths and variables
in_1=$1
in_2=$2
in_se=$3
out_dir=$4

name=$(basename "$in_1" ".fq")

## Run abyss

echo " abyss-pe name=${name} k=64 in='${in_1} ${in_2}' se='${in_se}' --directory=${out_dir}"
abyss-pe np=2 name=$name k=64 in="$in_1 $in_2" se="$in_se" --directory=$out_dir


echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
date
echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
echo

